(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{94:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return s}));var a=n(3),o=n(7),r=(n(0),n(104)),i={slug:"what-is-fp",title:"What is Functional Programming",author:"Unional",author_title:"Clean Architect",author_url:"https://github.com/unional",author_image_url:"https://avatars0.githubusercontent.com/unional?s=400&v=4",tags:["functional programming","just-func"]},c={permalink:"/blog/what-is-fp",editUrl:"https://github.com/unional/unional.github.io/edit/master/blog/blog/2021-03-21-what-is-functional-programming.md",source:"@site/blog/2021-03-21-what-is-functional-programming.md",description:"I have been promoting and migrating from Object Oriented Programming to Functional Programing for many years, and I loved it.",date:"2021-03-21T00:00:00.000Z",formattedDate:"March 21, 2021",tags:[{label:"functional programming",permalink:"/blog/tags/functional-programming"},{label:"just-func",permalink:"/blog/tags/just-func"}],title:"What is Functional Programming",readingTime:2.985,truncated:!1},l=[{value:"Functional Programming Paradigm",id:"functional-programming-paradigm",children:[]},{value:"References",id:"references",children:[]}],u={toc:l};function s(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"I have been promoting and migrating from Object Oriented Programming to Functional Programing for many years, and I loved it."),Object(r.b)("p",null,"But just like everything,\nthe more you dig into it, the more you realize what you do not know."),Object(r.b)("p",null,"Recently I have been working on ",Object(r.b)("a",{parentName:"p",href:"https://github.com/justland/just-func"},Object(r.b)("inlineCode",{parentName:"a"},"just-func")),"."),Object(r.b)("p",null,"I want to design it to be a homoiconic, functional programming language."),Object(r.b)("p",null,"But when I put my finger to it,\nI start wondering what exactly is functional programming."),Object(r.b)("p",null,"When people talk about functional programming,\nthey often talk about languages such as Lisp, Haskell, F#, Clojure, etc."),Object(r.b)("p",null,"But can you do functional programming in other languages?"),Object(r.b)("p",null,"Of course! You can do it in JavaScript/TypeScript,\nand you can do it in C#, Java, and even C++."),Object(r.b)("p",null,"They also talk about recursion, immutability, monoid, monad, functor, etc."),Object(r.b)("p",null,"So do they define functional programming?"),Object(r.b)("p",null,"In order to design ",Object(r.b)("a",{parentName:"p",href:"https://github.com/justland/just-func"},Object(r.b)("inlineCode",{parentName:"a"},"just-func"))," correctly,\nI send myself on a small research journey."),Object(r.b)("h2",{id:"functional-programming-paradigm"},"Functional Programming Paradigm"),Object(r.b)("p",null,"Functional Programming (FP) is a paradigm,\njust like Object Oriented Programming (OOP) is a paradigm."),Object(r.b)("p",null,"FP has its root in lambda calculus, which is a subset of category theory."),Object(r.b)("p",null,"Therefore, to understand FP, we should first understand category theory."),Object(r.b)("p",null,"There is a lot to learn about FP from category theory.\nBut in this blog, we only need to answer the very first question: what is a category?"),Object(r.b)("p",null,"Bartosz Milewski's excellent book ",Object(r.b)("a",{parentName:"p",href:"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"},"Category Theory for Programmers")," has the perfect description:"),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"A category consists of objects and arrows that go between them.")),Object(r.b)("p",null,"To paraphrase and expand that a bit,\nit is about ",Object(r.b)("em",{parentName:"p"},"a set of transformations ",Object(r.b)("inlineCode",{parentName:"em"},"f"))," that transforms ",Object(r.b)("em",{parentName:"p"},"a set of objects ",Object(r.b)("inlineCode",{parentName:"em"},"a"))," to ",Object(r.b)("em",{parentName:"p"},"a set of objects ",Object(r.b)("inlineCode",{parentName:"em"},"b")),"."),Object(r.b)("p",null,"i.e.: ",Object(r.b)("inlineCode",{parentName:"p"},"f(a) -> b")),Object(r.b)("p",null,"It is a function!"),Object(r.b)("p",null,"In fact, if we look at this closely,\nwe can derive the two basic ",Object(r.b)("em",{parentName:"p"},"requirements")," of FP:"),Object(r.b)("ol",null,Object(r.b)("li",{parentName:"ol"},"Since we are talking about mathematics, this function ",Object(r.b)("inlineCode",{parentName:"li"},"f(a) -> b")," must be pure."),Object(r.b)("li",{parentName:"ol"},Object(r.b)("inlineCode",{parentName:"li"},"a")," and ",Object(r.b)("inlineCode",{parentName:"li"},"b")," are just ",Object(r.b)("em",{parentName:"li"},"set of objects"),", this means they can be anything:\\\nvalues (such as string and numbers), set of values (such as array, list, vector, object),\\\nfunctions (higher-order function), or set of functions (generics)")),Object(r.b)("p",null,"Any other characteristics of FP are just derivatives of these two requirements.\nLet me list a few here:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"immutable data: this is needed in order for the function to be pure"),Object(r.b)("li",{parentName:"ul"},"first-class function: this preferred (but not required) so that we can use ",Object(r.b)("em",{parentName:"li"},"a set of functions")," for ",Object(r.b)("inlineCode",{parentName:"li"},"a")," or ",Object(r.b)("inlineCode",{parentName:"li"},"b")),Object(r.b)("li",{parentName:"ul"},"closure: this is preferred (but not required) so that we can do more with functions such as partial applications or delay execution."),Object(r.b)("li",{parentName:"ul"},"declarative programming: this is the result of no needed to mutate data."),Object(r.b)("li",{parentName:"ul"},"recursion instead of looping: this is the result of not able to mutate data")),Object(r.b)("p",null,'Notice that in "we can derive the two basic ',Object(r.b)("em",{parentName:"p"},"requirements"),' of FP" I made the word ',Object(r.b)("em",{parentName:"p"},"requirements"),' italic,\nand I also mentioned that "first-class function* is preferred but not required.'),Object(r.b)("p",null,"It is because we can always wrap a function in an object and pass it along.\nIt is very clumsy but is doable.\nThat is how you write functional code in OOP languages such as Java and C#."),Object(r.b)("p",null,"Therefore, the ONLY requirement of FP is pure function."),Object(r.b)("p",null,"Of course, that is a lot more going on, such as composition, associativity, monoid, monad, functor, etc."),Object(r.b)("p",null,"But those are categorizations and extensions to this simple concept."),Object(r.b)("p",null,"I will talk about them at a later time."),Object(r.b)("p",null,"Happy coding!"),Object(r.b)("h2",{id:"references"},"References"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://cleancoders.com/series/humane-code-real"},"Clean Coders Humane Code Series")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://cleancoders.com/series/clean-code/functional-programming"},"Clean Coders Functional Programming Series")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"},"Category Theory For Programmers")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://www.tutorialspoint.com/functional_programming/functional_programming_introduction.htm"},"https://www.tutorialspoint.com/functional_programming/functional_programming_introduction.htm")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Functional_programming"},"https://en.wikipedia.org/wiki/Functional_programming")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"https://www.guru99.com/functional-programming-tutorial.html"},"https://www.guru99.com/functional-programming-tutorial.html"))))}s.isMDXComponent=!0}}]);