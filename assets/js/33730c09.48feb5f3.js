(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{78:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(3),o=n(7),i=(n(0),n(104)),r={slug:"welcome",title:"What is Functional Programming",author:"Unional",author_title:"Clean Architect",author_url:"https://github.com/unional",author_image_url:"https://avatars0.githubusercontent.com/unional?s=400&v=4",tags:["functional programming","just-func"]},l={permalink:"/blog/welcome",editUrl:"https://github.com/unional/unional.github.io/edit/master/blog/blog/2021-03-21-what-is-functional-programming.md",source:"@site/blog/2021-03-21-what-is-functional-programming.md",description:"Recently I've been working on just-func.",date:"2021-03-21T00:00:00.000Z",formattedDate:"March 21, 2021",tags:[{label:"functional programming",permalink:"/blog/tags/functional-programming"},{label:"just-func",permalink:"/blog/tags/just-func"}],title:"What is Functional Programming",readingTime:2.805,truncated:!1},c=[{value:"Functional Programming",id:"functional-programming",children:[]},{value:"References",id:"references",children:[]}],s={toc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},s,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Recently I've been working on ",Object(i.b)("a",{parentName:"p",href:"https://github.com/justland/just-func"},Object(i.b)("inlineCode",{parentName:"a"},"just-func")),"."),Object(i.b)("p",null,"I want to design it to be a homoiconic, functional programming language."),Object(i.b)("p",null,"As with everything,\nwhen you try to create something is the time you understand how little you know."),Object(i.b)("p",null,"This time, it's about functional programming."),Object(i.b)("p",null,"What exactly is functional programming?"),Object(i.b)("p",null,"When people talk about functional programming,\nthe first thing that comes to mind is the languages: Lisp, Haskell, F#, Clojure, etc."),Object(i.b)("p",null,"But can you do functional programming in other languages?\nOf course,\nI have been writing functional-style programming in JavaScript/TypeScript for many years.\nYou can also write functional code in C#, Java, and even C++."),Object(i.b)("p",null,"So are they all functional programming languages?"),Object(i.b)("p",null,"I think most people will say no."),Object(i.b)("p",null,"In order to design ",Object(i.b)("a",{parentName:"p",href:"https://github.com/justland/just-func"},Object(i.b)("inlineCode",{parentName:"a"},"just-func"))," correctly,\nI send myself on a small research journey."),Object(i.b)("h2",{id:"functional-programming"},"Functional Programming"),Object(i.b)("p",null,"First of all, Functional Programming (FP) is a paradigm,\njust like Object Oriented Programming (OOP) is a paradigm."),Object(i.b)("p",null,"FP has its root in lambda calculus, which is a subset of category theory."),Object(i.b)("p",null,"What is a category?\nBartosz Milewski's excellent book ",Object(i.b)("a",{parentName:"p",href:"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"},"Category Theory for Programmers")," has the perfect description:"),Object(i.b)("blockquote",null,Object(i.b)("p",{parentName:"blockquote"},"A category consists of objects and arrows that go between them.")),Object(i.b)("p",null,"To paraphrase and expand that a bit,\nit is about ",Object(i.b)("em",{parentName:"p"},"a set of transformations ",Object(i.b)("inlineCode",{parentName:"em"},"f"))," that transforms ",Object(i.b)("em",{parentName:"p"},"a set of objects ",Object(i.b)("inlineCode",{parentName:"em"},"a"))," to ",Object(i.b)("em",{parentName:"p"},"a set of objects ",Object(i.b)("inlineCode",{parentName:"em"},"b")),"."),Object(i.b)("p",null,"i.e.: ",Object(i.b)("inlineCode",{parentName:"p"},"f(a) -> b")),Object(i.b)("p",null,"It's a function!"),Object(i.b)("p",null,"To understand the essence of anything,\nlook at the fundamentals to make it perfectly clear is often the best approach."),Object(i.b)("p",null,"In fact, if we look at this closely,\nwe can derive the two basic ",Object(i.b)("em",{parentName:"p"},"requirements")," of FP:"),Object(i.b)("ol",null,Object(i.b)("li",{parentName:"ol"},"Since we are talking about mathematics, this function ",Object(i.b)("inlineCode",{parentName:"li"},"f(a) -> b")," must be pure."),Object(i.b)("li",{parentName:"ol"},Object(i.b)("inlineCode",{parentName:"li"},"a")," and ",Object(i.b)("inlineCode",{parentName:"li"},"b")," are just ",Object(i.b)("em",{parentName:"li"},"set of objects"),", this means they can be anything:\\\nvalues (such as string and numbers), set of values (such as array, list, vector, object),\\\nfunctions (higher-order function), or set of functions (generics)")),Object(i.b)("p",null,"Any other characteristics of FP are just derivatives of these two requirements.\nLet me list a few here:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"immutable data: this is needed in order for the function to be pure"),Object(i.b)("li",{parentName:"ul"},"first-class function: this preferred (but not required) so that we can use ",Object(i.b)("em",{parentName:"li"},"a set of functions")," for ",Object(i.b)("inlineCode",{parentName:"li"},"a")," or ",Object(i.b)("inlineCode",{parentName:"li"},"b")),Object(i.b)("li",{parentName:"ul"},"closure: this is preferred (but not required) so that we can do more with functions such as partial application or delay execution."),Object(i.b)("li",{parentName:"ul"},"declarative programming: this is the result of no needed to mutate data."),Object(i.b)("li",{parentName:"ul"},"recursion instead of loop: this is result of not able to mutate data")),Object(i.b)("p",null,'Notice that in "we can derive the two basic ',Object(i.b)("em",{parentName:"p"},"requirements"),' of FP" I made the word ',Object(i.b)("em",{parentName:"p"},"requirements"),' italic,\nand I also mentioned that "first-class function* is preferred but not required.'),Object(i.b)("p",null,"This is because we can always wrap a function in an object and pass it along.\nIt is very clumsy, but is doable.\nThat's how you write functional code in OOP language such as Java and C#."),Object(i.b)("p",null,"Therefore, the ONLY requirement of FP is data immutability."),Object(i.b)("p",null,"Of course that are a lot more going on, such as composition, associativity, monoid, monad, functor, etc."),Object(i.b)("p",null,"But those are categorizations and extensions to this simple concept."),Object(i.b)("p",null,"I'll talk about them at a later time."),Object(i.b)("p",null,"Happy coding!"),Object(i.b)("h2",{id:"references"},"References"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://cleancoders.com/series/humane-code-real"},"Clean Coders Humane Code Series")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://cleancoders.com/series/clean-code/functional-programming"},"Clean Coders Functional Programming Series")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"},"Category Theory For Programmers")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://www.tutorialspoint.com/functional_programming/functional_programming_introduction.htm"},"https://www.tutorialspoint.com/functional_programming/functional_programming_introduction.htm")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Functional_programming"},"https://en.wikipedia.org/wiki/Functional_programming")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"https://www.guru99.com/functional-programming-tutorial.html"},"https://www.guru99.com/functional-programming-tutorial.html"))))}u.isMDXComponent=!0}}]);