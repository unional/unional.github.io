"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[134],{8570:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(79);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=u(n),g=r,h=m["".concat(s,".").concat(g)]||m[g]||p[g]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:r,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3085:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=n(8041),r=(n(79),n(8570));const o={slug:"what-is-fp",title:"What is Functional Programming",authors:["unional"],tags:["functional programming","just-func"]},i=void 0,l={permalink:"/blog/what-is-fp",editUrl:"https://github.com/unional/unional.github.io/edit/main/blog/blog/2021-03-21-what-is-functional-programming.mdx",source:"@site/blog/2021-03-21-what-is-functional-programming.mdx",title:"What is Functional Programming",description:"I have been promoting and migrating from Object-Oriented Programming to Functional Programming for many years, and I loved it.",date:"2021-03-21T00:00:00.000Z",formattedDate:"March 21, 2021",tags:[{label:"functional programming",permalink:"/blog/tags/functional-programming"},{label:"just-func",permalink:"/blog/tags/just-func"}],readingTime:4.14,hasTruncateMarker:!1,authors:[{name:"Homa Wong (unional)",title:"Clean Architect",url:"https://github.com/unional",imageURL:"https://github.com/unional.png",key:"unional"}],frontMatter:{slug:"what-is-fp",title:"What is Functional Programming",authors:["unional"],tags:["functional programming","just-func"]},prevItem:{title:"Structural Type vs Function Overload",permalink:"/blog/struct-type-func-overload"}},s={authorsImageUrls:[void 0]},u=[{value:"Functional Programming is a Paradigm",id:"functional-programming-is-a-paradigm",level:2},{value:"References",id:"references",level:2}],c={toc:u};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"I have been promoting and migrating from Object-Oriented Programming to Functional Programming for many years, and I loved it."),(0,r.kt)("p",null,"But just like everything,\nthe more you dig into it, the more you realize what you do not know."),(0,r.kt)("p",null,"Recently I have been working on ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/justland/just-func"},(0,r.kt)("inlineCode",{parentName:"a"},"just-func")),"."),(0,r.kt)("p",null,"I want to design it to be a homoiconic, functional programming language."),(0,r.kt)("p",null,"But when I put my finger to it,\nI start wondering what exactly is functional programming."),(0,r.kt)("p",null,"When people talk about functional programming,\nthey often talk about languages such as Lisp, Haskell, F#, Clojure, etc."),(0,r.kt)("p",null,"But can you do functional programming in other languages?"),(0,r.kt)("p",null,"Of course! You can do it in JavaScript/TypeScript,\nand you can do it in C#, Java, and even C++."),(0,r.kt)("p",null,"They also talk about pure function, immutability, recursion, monoid, monad, functor, etc."),(0,r.kt)("p",null,"So do these things define functional programming?"),(0,r.kt)("p",null,"In order to design ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/justland/just-func"},(0,r.kt)("inlineCode",{parentName:"a"},"just-func"))," correctly,\nI send myself on a small research journey."),(0,r.kt)("h2",{id:"functional-programming-is-a-paradigm"},"Functional Programming is a Paradigm"),(0,r.kt)("p",null,"Functional Programming (FP) is a paradigm,\njust like Object-Oriented Programming (OOP) is a paradigm."),(0,r.kt)("p",null,"What is paradigm?"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Paradigm is a cognitive framework containing basic assumptions, ways of thinking, and methodology.")),(0,r.kt)("p",null,"In this context, it means that it is a specific approach to programming."),(0,r.kt)("p",null,"FP has its root in lambda calculus, which is a subset of category theory."),(0,r.kt)("p",null,"Therefore, to understand FP, we should first understand category theory."),(0,r.kt)("p",null,"There is a lot to learn about FP from category theory.\nBut in this blog, we only need to answer the very first question: what is a category?"),(0,r.kt)("p",null,"Bartosz Milewski's excellent book ",(0,r.kt)("a",{parentName:"p",href:"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"},"Category Theory for Programmers")," has the perfect description:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A category consists of objects and arrows that go between them.")),(0,r.kt)("p",null,"From this definition, a category has two things: objects and arrows."),(0,r.kt)("p",null,"What is an object? The definition didn't specify. It is intentional thou.\nFor now, let's keep it that way."),(0,r.kt)("p",null,"What is an arrow? The definition also didn't specify.\nBut it does give a bit more information about it: arrows that go between them."),(0,r.kt)("p",null,'Arrow is directional, and "go between them" means the arrow starts from one object and ends with one object.'),(0,r.kt)("p",null,"The start object and the end object can be the same object, or they can be different."),(0,r.kt)("p",null,"Also, they are in plural form: objects and arrows.\nIn mathematics, that means they are a set: a set of objects and a set of arrows."),(0,r.kt)("p",null,"So putting these back together, the definition becomes:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"A category is about ",(0,r.kt)("em",{parentName:"p"},"a set of objects ",(0,r.kt)("inlineCode",{parentName:"em"},"a"))," to ",(0,r.kt)("em",{parentName:"p"},"a set of objects ",(0,r.kt)("inlineCode",{parentName:"em"},"b")),",\nand ",(0,r.kt)("em",{parentName:"p"},"a set of transformations ",(0,r.kt)("inlineCode",{parentName:"em"},"f"))," that transforms ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"b"),".")),(0,r.kt)("p",null,"i.e.: ",(0,r.kt)("inlineCode",{parentName:"p"},"f(a) \u21fe b")),(0,r.kt)("p",null,"It is a function!"),(0,r.kt)("p",null,"Note that ",(0,r.kt)("inlineCode",{parentName:"p"},"f"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"b")," all have their significance."),(0,r.kt)("p",null,"This means when talking about a specific category,\nwe need to specify ",(0,r.kt)("inlineCode",{parentName:"p"},"f"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"a"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"b"),"."),(0,r.kt)("p",null,"From here, we can derive the two basic ",(0,r.kt)("em",{parentName:"p"},"requirements")," of FP:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Since we are talking about mathematics, this function ",(0,r.kt)("inlineCode",{parentName:"li"},"f(a) \u21fe b")," is a formula.\\\nThat means every time you call it with a specific ",(0,r.kt)("inlineCode",{parentName:"li"},"a'"),", it will always return ",(0,r.kt)("inlineCode",{parentName:"li"},"b'"),".\\\nIn other words, the function must be pure."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"a")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"b")," are just ",(0,r.kt)("em",{parentName:"li"},"set of objects"),", this means they can be anything:\\\nvalues (such as strings and numbers), set of values (such as arrays, lists, vectors, objects), \\\nfunctions (higher-order functions), or set of functions (generics)")),(0,r.kt)("p",null,"Any other characteristics of FP are just derivatives of these two requirements.\nLet list a few here:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Immutable data: this is needed for the function to be pure"),(0,r.kt)("li",{parentName:"ul"},"First-class function: this preferred (but not required) so that we can use ",(0,r.kt)("em",{parentName:"li"},"function")," can be value, \\\ni.e., we can use function as ",(0,r.kt)("inlineCode",{parentName:"li"},"a")," (callback), or ",(0,r.kt)("inlineCode",{parentName:"li"},"b")," (higher-order function)."),(0,r.kt)("li",{parentName:"ul"},"Closure: this is beneficial (but not required) as it allows functions to capture additional contexts"),(0,r.kt)("li",{parentName:"ul"},"Declarative programming: this is the result of no needed to mutate data."),(0,r.kt)("li",{parentName:"ul"},"Recursion instead of looping: this is the result of not able to mutate data")),(0,r.kt)("p",null,"Notice that I italicize ",(0,r.kt)("em",{parentName:"p"},"requirements"),' in "We can derive the two basic ',(0,r.kt)("em",{parentName:"p"},"requirements"),' of FP",\nand I also mentioned that first-class function is preferred but not required.'),(0,r.kt)("p",null,"It is because we can always wrap a function in an object and pass it along.\nIt is very clumsy but is doable.\nThat is how you write functional code in OOP languages such as Java and C#."),(0,r.kt)("p",null,"Therefore, the ONLY requirement of FP is pure function."),(0,r.kt)("p",null,"That means you can write functional programming code any programming language."),(0,r.kt)("p",null,"Of course, just that requirement is not that useful.\nBut it gives you a critical insight:"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"As long as you can find ways to keep your function pure,\nyou can get the benefits of functional programming.")),(0,r.kt)("p",null,"Obviously, there are still a lot more to talk about.\nI will cover them in the subsequence posts."),(0,r.kt)("p",null,"Until then, Happy coding!"),(0,r.kt)("h2",{id:"references"},"References"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://cleancoders.com/series/humane-code-real"},"Clean Coders Humane Code Series")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://cleancoders.com/series/clean-code/functional-programming"},"Clean Coders Functional Programming Series")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"},"Category Theory For Programmers")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.tutorialspoint.com/functional_programming/functional_programming_introduction.htm"},"https://www.tutorialspoint.com/functional_programming/functional_programming_introduction.htm")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Functional_programming"},"https://en.wikipedia.org/wiki/Functional_programming")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.guru99.com/functional-programming-tutorial.html"},"https://www.guru99.com/functional-programming-tutorial.html"))))}m.isMDXComponent=!0}}]);