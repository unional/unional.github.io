<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://unional.github.io/blog</id>
    <title>Unional Blog Blog</title>
    <updated>2021-04-10T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://unional.github.io/blog"/>
    <subtitle>Unional Blog Blog</subtitle>
    <icon>https://unional.github.io/img/uni.ico</icon>
    <entry>
        <title type="html"><![CDATA[Structural Type vs Function Overload]]></title>
        <id>struct-type-func-overload</id>
        <link href="https://unional.github.io/blog/struct-type-func-overload"/>
        <updated>2021-04-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Structural type is what I want.]]></summary>
        <content type="html"><![CDATA[<p>Structural type is what I want.</p><p>Function overloading is also what I want.</p><p>Can they co-exist? The answer is no.</p><p>Let me explain.</p><p>Structural type avoids a lot of architecture problems existed in nominal type languages.</p><p>So to me, when designing a new language or choosing a language to work on,
it is <em>almost</em> a must (except <code>rust</code>, which is too good to pass on).</p><p>Function overloading allows the code to be humane,
especially for functional programming.</p><p>With function overloading,
you can define the same function with different parameters and different types of parameters with the same name.</p><p>So instead of using a different function for each type,
you can call the same function (at least that's how it appears at the call site).</p><p>Why can't they co-exist?
Let's take a look at an example:</p><div class="language-typescript codeBlockContainer_MPoW theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-typescript codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(130, 170, 255)">A</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> a</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">number</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">type</span><span class="token plain"> </span><span class="token class-name constant" style="color:rgb(130, 170, 255)">B</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> b</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">foo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">input</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">A</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/*…snip…*/</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">foo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">input</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">B</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/*…snip…*/</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>If the <code>input</code> is <code>{ a: 1, b: 'b' }</code>,
the compiler will not be able to figure out which <code>foo()</code> to invoke.</p><p>Note that when I say function overloading,
I mean function with the same name but with different parameters,
and each of them have their own implementation.</p><p>i.e.:</p><div class="language-ts codeBlockContainer_MPoW theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-ts codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">foo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">input</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">A</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/*…snip…*/</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">foo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">input</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">B</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/*…snip…*/</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>TypeScript's function overloading is really signature overloading:</p><div class="language-ts codeBlockContainer_MPoW theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_B9tL"><pre tabindex="0" class="prism-code language-ts codeBlock__0OG thin-scrollbar"><code class="codeBlockLines_gEuF"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">foo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">input</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">A</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">foo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">input</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">B</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">void</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">foo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">input</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">A</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">|</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">B</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/*…snip…*/</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup_hRr1"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_W9eQ" aria-hidden="true"><svg class="copyButtonIcon_XEyF" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_i9w9" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This difference is important because it allows you to add function overload in different files and modules.</p><p>With signature overloading,
you have to know ahead of time all the types you need to support,
creating a top-down dependency same as those in nominal type languages.</p><p>In the same fashion, discriminated union has the same problem.</p><p>Is there a way to solve this?</p><p>Well, sort of: generics and HKT.</p><p>But that's a different topic.</p><p>Happy Coding.</p>]]></content>
        <author>
            <name>Homa Wong (unional)</name>
            <uri>https://github.com/unional</uri>
        </author>
        <category label="type-system" term="type-system"/>
        <category label="structural-type" term="structural-type"/>
        <category label="function-overload" term="function-overload"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[What is Functional Programming]]></title>
        <id>what-is-fp</id>
        <link href="https://unional.github.io/blog/what-is-fp"/>
        <updated>2021-03-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I have been promoting and migrating from Object-Oriented Programming to Functional Programming for many years, and I loved it.]]></summary>
        <content type="html"><![CDATA[<p>I have been promoting and migrating from Object-Oriented Programming to Functional Programming for many years, and I loved it.</p><p>But just like everything,
the more you dig into it, the more you realize what you do not know.</p><p>Recently I have been working on <a href="https://github.com/justland/just-func" target="_blank" rel="noopener noreferrer"><code>just-func</code></a>.</p><p>I want to design it to be a homoiconic, functional programming language.</p><p>But when I put my finger to it,
I start wondering what exactly is functional programming.</p><p>When people talk about functional programming,
they often talk about languages such as Lisp, Haskell, F#, Clojure, etc.</p><p>But can you do functional programming in other languages?</p><p>Of course! You can do it in JavaScript/TypeScript,
and you can do it in C#, Java, and even C++.</p><p>They also talk about pure function, immutability, recursion, monoid, monad, functor, etc.</p><p>So do these things define functional programming?</p><p>In order to design <a href="https://github.com/justland/just-func" target="_blank" rel="noopener noreferrer"><code>just-func</code></a> correctly,
I send myself on a small research journey.</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="functional-programming-is-a-paradigm">Functional Programming is a Paradigm<a class="hash-link" href="#functional-programming-is-a-paradigm" title="Direct link to heading">​</a></h2><p>Functional Programming (FP) is a paradigm,
just like Object-Oriented Programming (OOP) is a paradigm.</p><p>What is paradigm?</p><blockquote><p>Paradigm is a cognitive framework containing basic assumptions, ways of thinking, and methodology.</p></blockquote><p>In this context, it means that it is a specific approach to programming.</p><p>FP has its root in lambda calculus, which is a subset of category theory.</p><p>Therefore, to understand FP, we should first understand category theory.</p><p>There is a lot to learn about FP from category theory.
But in this blog, we only need to answer the very first question: what is a category?</p><p>Bartosz Milewski's excellent book <a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/" target="_blank" rel="noopener noreferrer">Category Theory for Programmers</a> has the perfect description:</p><blockquote><p>A category consists of objects and arrows that go between them.</p></blockquote><p>From this definition, a category has two things: objects and arrows.</p><p>What is an object? The definition didn't specify. It is intentional thou.
For now, let's keep it that way.</p><p>What is an arrow? The definition also didn't specify.
But it does give a bit more information about it: arrows that go between them.</p><p>Arrow is directional, and "go between them" means the arrow starts from one object and ends with one object.</p><p>The start object and the end object can be the same object, or they can be different.</p><p>Also, they are in plural form: objects and arrows.
In mathematics, that means they are a set: a set of objects and a set of arrows.</p><p>So putting these back together, the definition becomes:</p><blockquote><p>A category is about <em>a set of objects <code>a</code></em> to <em>a set of objects <code>b</code></em>,
and <em>a set of transformations <code>f</code></em> that transforms <code>a</code> to <code>b</code>.</p></blockquote><p>i.e.: <code>f(a) ⇾ b</code></p><p>It is a function!</p><p>Note that <code>f</code>, <code>a</code>, and <code>b</code> all have their significance.</p><p>This means when talking about a specific category,
we need to specify <code>f</code>, <code>a</code>, and <code>b</code>.</p><p>From here, we can derive the two basic <em>requirements</em> of FP:</p><ol><li>Since we are talking about mathematics, this function <code>f(a) ⇾ b</code> is a formula.\
That means every time you call it with a specific <code>a'</code>, it will always return <code>b'</code>.\
In other words, the function must be pure.</li><li><code>a</code> and <code>b</code> are just <em>set of objects</em>, this means they can be anything:\
values (such as strings and numbers), set of values (such as arrays, lists, vectors, objects), \
functions (higher-order functions), or set of functions (generics)</li></ol><p>Any other characteristics of FP are just derivatives of these two requirements.
Let list a few here:</p><ul><li>Immutable data: this is needed for the function to be pure</li><li>First-class function: this preferred (but not required) so that we can use <em>function</em> can be value, \
i.e., we can use function as <code>a</code> (callback), or <code>b</code> (higher-order function).</li><li>Closure: this is beneficial (but not required) as it allows functions to capture additional contexts</li><li>Declarative programming: this is the result of no needed to mutate data.</li><li>Recursion instead of looping: this is the result of not able to mutate data</li></ul><p>Notice that I italicize <em>requirements</em> in "We can derive the two basic <em>requirements</em> of FP",
and I also mentioned that first-class function is preferred but not required.</p><p>It is because we can always wrap a function in an object and pass it along.
It is very clumsy but is doable.
That is how you write functional code in OOP languages such as Java and C#.</p><p>Therefore, the ONLY requirement of FP is pure function.</p><p>That means you can write functional programming code any programming language.</p><p>Of course, just that requirement is not that useful.
But it gives you a critical insight:</p><blockquote><p>As long as you can find ways to keep your function pure,
you can get the benefits of functional programming.</p></blockquote><p>Obviously, there are still a lot more to talk about.
I will cover them in the subsequence posts.</p><p>Until then, Happy coding!</p><h2 class="anchor anchorWithStickyNavbar_mojV" id="references">References<a class="hash-link" href="#references" title="Direct link to heading">​</a></h2><ul><li><a href="https://cleancoders.com/series/humane-code-real" target="_blank" rel="noopener noreferrer">Clean Coders Humane Code Series</a></li><li><a href="https://cleancoders.com/series/clean-code/functional-programming" target="_blank" rel="noopener noreferrer">Clean Coders Functional Programming Series</a></li><li><a href="https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/" target="_blank" rel="noopener noreferrer">Category Theory For Programmers</a></li><li><a href="https://www.tutorialspoint.com/functional_programming/functional_programming_introduction.htm" target="_blank" rel="noopener noreferrer">https://www.tutorialspoint.com/functional_programming/functional_programming_introduction.htm</a></li><li><a href="https://en.wikipedia.org/wiki/Functional_programming" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Functional_programming</a></li><li><a href="https://www.guru99.com/functional-programming-tutorial.html" target="_blank" rel="noopener noreferrer">https://www.guru99.com/functional-programming-tutorial.html</a></li></ul>]]></content>
        <author>
            <name>Homa Wong (unional)</name>
            <uri>https://github.com/unional</uri>
        </author>
        <category label="functional programming" term="functional programming"/>
        <category label="just-func" term="just-func"/>
    </entry>
</feed>